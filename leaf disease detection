{"cells":[{"cell_type":"markdown","metadata":{"id":"PxtJNhZFrM5s"},"source":["Importing Libraries"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":9384,"status":"ok","timestamp":1740456215851,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"6pS8iTcOi7MS"},"outputs":[],"source":["import os\n","import cv2\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import json\n","from zipfile import ZipFile\n","from PIL import Image\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import keras\n","from keras.callbacks import EarlyStopping,ModelCheckpoint\n","import tensorflow as tf\n","from sklearn.metrics import classification_report\n","from tqdm import tqdm"]},{"cell_type":"markdown","metadata":{"id":"mCq-f2yOrdrd"},"source":["Installing kaggle API"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5223,"status":"ok","timestamp":1740456231269,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"o033b1t6jNoD","outputId":"a7160017-d013-4460-847d-1ffb109b9126"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (1.6.17)\n","Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.17.0)\n","Requirement already satisfied: certifi>=2023.7.22 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2025.1.31)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.8.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.32.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kaggle) (4.67.1)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle) (8.0.4)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.3.0)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle) (6.2.0)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach->kaggle) (0.5.1)\n","Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.11/dist-packages (from python-slugify->kaggle) (1.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->kaggle) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->kaggle) (3.10)\n"]}],"source":["!pip install kaggle"]},{"cell_type":"markdown","metadata":{"id":"VdSEpENErks_"},"source":["Setting up kaggle credentials"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":312,"status":"ok","timestamp":1740456234666,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"lY13orjqjQB1"},"outputs":[],"source":["kaggle_credentails = json.load(open(\"/content/drive/MyDrive/plant disease detection/kaggle.json\"))"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":203,"status":"ok","timestamp":1740456236214,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"YZZ82DRrlN7E"},"outputs":[],"source":["# setup Kaggle API key as environment variables\n","os.environ['KAGGLE_USERNAME'] = kaggle_credentails[\"username\"]\n","os.environ['KAGGLE_KEY'] = kaggle_credentails[\"key\"]"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ad_izeN5lT5X","executionInfo":{"status":"ok","timestamp":1740456333128,"user_tz":-330,"elapsed":95531,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"}},"outputId":"7d48a58d-03ff-4bd1-a8a9-83d9a6f5f89d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset URL: https://www.kaggle.com/datasets/abdallahalidev/plantvillage-dataset\n","License(s): CC-BY-NC-SA-4.0\n","Downloading plantvillage-dataset.zip to /content\n","100% 2.04G/2.04G [01:34<00:00, 23.0MB/s]\n","100% 2.04G/2.04G [01:34<00:00, 23.2MB/s]\n"]}],"source":["#Downloading the dataset\n","!kaggle datasets download -d abdallahalidev/plantvillage-dataset"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1740456338967,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"DCX62DAS03_9","outputId":"136c62f3-c841-4c31-8476-2ed6babec100"},"outputs":[{"output_type":"stream","name":"stdout","text":["drive  plantvillage-dataset.zip  sample_data\n"]}],"source":["!ls"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"FUurzpU314Q2","executionInfo":{"status":"ok","timestamp":1740456381262,"user_tz":-330,"elapsed":41110,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"}}},"outputs":[],"source":["# Unzip the downloaded dataset\n","with ZipFile(\"plantvillage-dataset.zip\", 'r') as zip_ref:\n","    zip_ref.extractall()"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1740456384330,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"VeaK7Vd-2W_q","outputId":"395efdd5-7e1e-4e37-8249-4253dbce1002"},"outputs":[{"output_type":"stream","name":"stdout","text":["['segmented', 'color', 'grayscale']\n","38\n","['Tomato___Septoria_leaf_spot', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 'Peach___healthy', 'Potato___healthy', 'Orange___Haunglongbing_(Citrus_greening)']\n","38\n","['Tomato___Septoria_leaf_spot', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 'Peach___healthy', 'Potato___healthy', 'Orange___Haunglongbing_(Citrus_greening)']\n","38\n","['Tomato___Septoria_leaf_spot', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 'Peach___healthy', 'Potato___healthy', 'Orange___Haunglongbing_(Citrus_greening)']\n"]}],"source":["print(os.listdir(\"plantvillage dataset\"))\n","\n","\n","print(len(os.listdir(\"plantvillage dataset/segmented\")))\n","print(os.listdir(\"plantvillage dataset/segmented\")[:5])\n","\n","print(len(os.listdir(\"plantvillage dataset/color\")))\n","print(os.listdir(\"plantvillage dataset/color\")[:5])\n","\n","print(len(os.listdir(\"plantvillage dataset/grayscale\")))\n","print(os.listdir(\"plantvillage dataset/grayscale\")[:5])"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1740456387476,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"WVA58eBe2v6w","outputId":"51af4a02-d191-4b09-934b-314b728dbcc2"},"outputs":[{"output_type":"stream","name":"stdout","text":["423\n","['d68b653c-4fe7-49ee-80d4-1f0c84092242___Mt.N.V_HL 6077.JPG', '87c9d8e2-3009-4e40-9db4-8fe35ab76599___Mt.N.V_HL 6058.JPG', '94ff1dad-4284-4b83-ae37-988cc12c2006___Mt.N.V_HL 8939.JPG', 'ff99a93a-ec9b-4a6d-a5e1-1a015cada478___Mt.N.V_HL 9057.JPG', '8d435543-bb52-4a00-a84a-02404010cb33___Mt.N.V_HL 9061.JPG']\n"]}],"source":["print(len(os.listdir(\"plantvillage dataset/color/Grape___healthy\")))\n","print(os.listdir(\"plantvillage dataset/color/Grape___healthy\")[:5])"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"dlxUbtnC22IZ","executionInfo":{"status":"ok","timestamp":1740456389024,"user_tz":-330,"elapsed":3,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"}}},"outputs":[],"source":["# Dataset Path\n","base_dir = 'plantvillage dataset/color'"]},{"cell_type":"markdown","metadata":{"id":"CeUo6kn1_N8m"},"source":["Data Preparation:\n","data() function reads images and their corresponding labels from dataset directory and stores them in a dataframe"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"zf5GfHwn3Dqx","executionInfo":{"status":"ok","timestamp":1740456391658,"user_tz":-330,"elapsed":5,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"}}},"outputs":[],"source":["def data(dataset_path):\n","    images = []\n","    labels = []\n","    for subfolder in tqdm(os.listdir(dataset_path)):\n","        subfolder_path = os.path.join(dataset_path, subfolder)\n","        for image_filename in os.listdir(subfolder_path):\n","            image_path = os.path.join(subfolder_path, image_filename)\n","            images.append(image_path)\n","            labels.append(subfolder)\n","    df = pd.DataFrame({'image': images, 'label': labels})\n","    return df"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":307,"status":"ok","timestamp":1740456393994,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"-V5b0-bX3UmT","outputId":"f084db90-1046-4bf9-90ab-3728d6b1c369"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 38/38 [00:00<00:00, 459.86it/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["                                               image  \\\n","0  plantvillage dataset/color/Tomato___Septoria_l...   \n","1  plantvillage dataset/color/Tomato___Septoria_l...   \n","2  plantvillage dataset/color/Tomato___Septoria_l...   \n","3  plantvillage dataset/color/Tomato___Septoria_l...   \n","4  plantvillage dataset/color/Tomato___Septoria_l...   \n","\n","                         label  \n","0  Tomato___Septoria_leaf_spot  \n","1  Tomato___Septoria_leaf_spot  \n","2  Tomato___Septoria_leaf_spot  \n","3  Tomato___Septoria_leaf_spot  \n","4  Tomato___Septoria_leaf_spot  "],"text/html":["\n","  <div id=\"df-7f7d7f40-b1c6-40cb-8755-c10425578b8c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>plantvillage dataset/color/Tomato___Septoria_l...</td>\n","      <td>Tomato___Septoria_leaf_spot</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>plantvillage dataset/color/Tomato___Septoria_l...</td>\n","      <td>Tomato___Septoria_leaf_spot</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>plantvillage dataset/color/Tomato___Septoria_l...</td>\n","      <td>Tomato___Septoria_leaf_spot</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>plantvillage dataset/color/Tomato___Septoria_l...</td>\n","      <td>Tomato___Septoria_leaf_spot</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>plantvillage dataset/color/Tomato___Septoria_l...</td>\n","      <td>Tomato___Septoria_leaf_spot</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f7d7f40-b1c6-40cb-8755-c10425578b8c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7f7d7f40-b1c6-40cb-8755-c10425578b8c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7f7d7f40-b1c6-40cb-8755-c10425578b8c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d0f339d7-ad1f-4f9c-aa0f-3bb9163f99bf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0f339d7-ad1f-4f9c-aa0f-3bb9163f99bf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d0f339d7-ad1f-4f9c-aa0f-3bb9163f99bf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train","summary":"{\n  \"name\": \"train\",\n  \"rows\": 54305,\n  \"fields\": [\n    {\n      \"column\": \"image\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 54305,\n        \"samples\": [\n          \"plantvillage dataset/color/Tomato___Tomato_Yellow_Leaf_Curl_Virus/935376fd-5756-47de-b5b0-da5e0f8283c2___UF.GRC_YLCV_Lab 08560.JPG\",\n          \"plantvillage dataset/color/Tomato___Spider_mites Two-spotted_spider_mite/db10c896-d67f-4dd1-bf51-61d3dfecefef___Com.G_SpM_FL 8568.JPG\",\n          \"plantvillage dataset/color/Tomato___Target_Spot/1b46f9fb-4e90-4cbf-bad5-78414e389be2___Com.G_TgS_FL 8001.JPG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 38,\n        \"samples\": [\n          \"Strawberry___healthy\",\n          \"Blueberry___healthy\",\n          \"Orange___Haunglongbing_(Citrus_greening)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}],"source":["#train\n","train = data(base_dir)\n","train.head()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1740456402860,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"bAt3G1sF3YoK","outputId":"c1b6aec0-6662-4b5d-9890-c9a4fa723582"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(54305, 2)"]},"metadata":{},"execution_count":13}],"source":["train.shape"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":60,"status":"ok","timestamp":1740456405677,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"O5JM9meL3cYk","outputId":"84b3da9e-5fce-4adb-f656-ac71887b3515"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                    count\n","label                                                    \n","Orange___Haunglongbing_(Citrus_greening)             5507\n","Tomato___Tomato_Yellow_Leaf_Curl_Virus               5357\n","Soybean___healthy                                    5090\n","Peach___Bacterial_spot                               2297\n","Tomato___Bacterial_spot                              2127\n","Tomato___Late_blight                                 1909\n","Squash___Powdery_mildew                              1835\n","Tomato___Septoria_leaf_spot                          1771\n","Tomato___Spider_mites Two-spotted_spider_mite        1676\n","Apple___healthy                                      1645\n","Tomato___healthy                                     1591\n","Blueberry___healthy                                  1502\n","Pepper,_bell___healthy                               1478\n","Tomato___Target_Spot                                 1404\n","Grape___Esca_(Black_Measles)                         1383\n","Corn_(maize)___Common_rust_                          1192\n","Grape___Black_rot                                    1180\n","Corn_(maize)___healthy                               1162\n","Strawberry___Leaf_scorch                             1109\n","Grape___Leaf_blight_(Isariopsis_Leaf_Spot)           1076\n","Cherry_(including_sour)___Powdery_mildew             1052\n","Potato___Early_blight                                1000\n","Potato___Late_blight                                 1000\n","Tomato___Early_blight                                1000\n","Pepper,_bell___Bacterial_spot                         997\n","Corn_(maize)___Northern_Leaf_Blight                   985\n","Tomato___Leaf_Mold                                    952\n","Cherry_(including_sour)___healthy                     854\n","Apple___Apple_scab                                    630\n","Apple___Black_rot                                     621\n","Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot    513\n","Strawberry___healthy                                  456\n","Grape___healthy                                       423\n","Tomato___Tomato_mosaic_virus                          373\n","Raspberry___healthy                                   371\n","Peach___healthy                                       360\n","Apple___Cedar_apple_rust                              275\n","Potato___healthy                                      152"],"text/html":["\n","  <div id=\"df-78f0e347-82f6-43f5-9489-14863f1c0141\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Orange___Haunglongbing_(Citrus_greening)</th>\n","      <td>5507</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Tomato_Yellow_Leaf_Curl_Virus</th>\n","      <td>5357</td>\n","    </tr>\n","    <tr>\n","      <th>Soybean___healthy</th>\n","      <td>5090</td>\n","    </tr>\n","    <tr>\n","      <th>Peach___Bacterial_spot</th>\n","      <td>2297</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Bacterial_spot</th>\n","      <td>2127</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Late_blight</th>\n","      <td>1909</td>\n","    </tr>\n","    <tr>\n","      <th>Squash___Powdery_mildew</th>\n","      <td>1835</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Septoria_leaf_spot</th>\n","      <td>1771</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Spider_mites Two-spotted_spider_mite</th>\n","      <td>1676</td>\n","    </tr>\n","    <tr>\n","      <th>Apple___healthy</th>\n","      <td>1645</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___healthy</th>\n","      <td>1591</td>\n","    </tr>\n","    <tr>\n","      <th>Blueberry___healthy</th>\n","      <td>1502</td>\n","    </tr>\n","    <tr>\n","      <th>Pepper,_bell___healthy</th>\n","      <td>1478</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Target_Spot</th>\n","      <td>1404</td>\n","    </tr>\n","    <tr>\n","      <th>Grape___Esca_(Black_Measles)</th>\n","      <td>1383</td>\n","    </tr>\n","    <tr>\n","      <th>Corn_(maize)___Common_rust_</th>\n","      <td>1192</td>\n","    </tr>\n","    <tr>\n","      <th>Grape___Black_rot</th>\n","      <td>1180</td>\n","    </tr>\n","    <tr>\n","      <th>Corn_(maize)___healthy</th>\n","      <td>1162</td>\n","    </tr>\n","    <tr>\n","      <th>Strawberry___Leaf_scorch</th>\n","      <td>1109</td>\n","    </tr>\n","    <tr>\n","      <th>Grape___Leaf_blight_(Isariopsis_Leaf_Spot)</th>\n","      <td>1076</td>\n","    </tr>\n","    <tr>\n","      <th>Cherry_(including_sour)___Powdery_mildew</th>\n","      <td>1052</td>\n","    </tr>\n","    <tr>\n","      <th>Potato___Early_blight</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>Potato___Late_blight</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Early_blight</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>Pepper,_bell___Bacterial_spot</th>\n","      <td>997</td>\n","    </tr>\n","    <tr>\n","      <th>Corn_(maize)___Northern_Leaf_Blight</th>\n","      <td>985</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Leaf_Mold</th>\n","      <td>952</td>\n","    </tr>\n","    <tr>\n","      <th>Cherry_(including_sour)___healthy</th>\n","      <td>854</td>\n","    </tr>\n","    <tr>\n","      <th>Apple___Apple_scab</th>\n","      <td>630</td>\n","    </tr>\n","    <tr>\n","      <th>Apple___Black_rot</th>\n","      <td>621</td>\n","    </tr>\n","    <tr>\n","      <th>Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot</th>\n","      <td>513</td>\n","    </tr>\n","    <tr>\n","      <th>Strawberry___healthy</th>\n","      <td>456</td>\n","    </tr>\n","    <tr>\n","      <th>Grape___healthy</th>\n","      <td>423</td>\n","    </tr>\n","    <tr>\n","      <th>Tomato___Tomato_mosaic_virus</th>\n","      <td>373</td>\n","    </tr>\n","    <tr>\n","      <th>Raspberry___healthy</th>\n","      <td>371</td>\n","    </tr>\n","    <tr>\n","      <th>Peach___healthy</th>\n","      <td>360</td>\n","    </tr>\n","    <tr>\n","      <th>Apple___Cedar_apple_rust</th>\n","      <td>275</td>\n","    </tr>\n","    <tr>\n","      <th>Potato___healthy</th>\n","      <td>152</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78f0e347-82f6-43f5-9489-14863f1c0141')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-78f0e347-82f6-43f5-9489-14863f1c0141 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-78f0e347-82f6-43f5-9489-14863f1c0141');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ed3ba063-5b1b-412c-9c01-eb2fc74b0997\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed3ba063-5b1b-412c-9c01-eb2fc74b0997')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ed3ba063-5b1b-412c-9c01-eb2fc74b0997 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"train\",\n  \"rows\": 38,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 38,\n        \"samples\": [\n          \"Tomato___Tomato_mosaic_virus\",\n          \"Apple___Cedar_apple_rust\",\n          \"Tomato___Bacterial_spot\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1271,\n        \"min\": 152,\n        \"max\": 5507,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          152,\n          1404,\n          630\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}],"source":["train.label.value_counts().to_frame()"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"19wvFT9Jy_EEAWDnyEO_38Q0IyM0hqlxP"},"executionInfo":{"elapsed":34062,"status":"ok","timestamp":1740456442644,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"yT-l9H5k3fGf","outputId":"f7a932c2-88a3-45fd-8eb9-8f81fae2f2c8"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["plt.style.use('dark_background')\n","plt.figure(figsize=(50,80))\n","for n,i in enumerate(np.random.randint(0,len(train),50)):\n","    plt.subplot(10,5,n+1)\n","    img = cv2.imread(train.image[i])\n","    img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n","    plt.imshow(img)\n","    plt.axis('off')\n","    text = f'{train.label[i]}\\n'\n","    plt.title(text,fontsize=25)"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"9Rvdsbmv3y3F","executionInfo":{"status":"ok","timestamp":1740456455563,"user_tz":-330,"elapsed":2,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"}}},"outputs":[],"source":["#splitting the dataset\n","X_train, X_test1, y_train, y_test1 = train_test_split(train['image'], train['label'], test_size=0.2, random_state=42,shuffle=True,stratify=train['label'])\n","X_val, X_test, y_val, y_test = train_test_split(X_test1,y_test1, test_size=0.5, random_state=42,shuffle=True,stratify=y_test1)\n","df_train = pd.DataFrame({'image': X_train, 'label': y_train})\n","df_test = pd.DataFrame({'image': X_test, 'label': y_test})\n","df_val = pd.DataFrame({'image': X_val, 'label': y_val})"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":151,"status":"ok","timestamp":1740456461311,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"KQTuvwb-39-X","outputId":"da51f1d3-784a-4a61-e408-bcceef2edb07"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 43444 validated image filenames belonging to 38 classes.\n","Found 5431 validated image filenames belonging to 38 classes.\n","Found 5430 validated image filenames belonging to 38 classes.\n"]}],"source":["#data augmentation and generators\n","\n","image_size = (224, 224)\n","batch_size = 32\n","datagen = ImageDataGenerator(\n","    rescale=1./255\n",")\n","train_datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    #rotation_range=20,\n","    #width_shift_range=0.2,\n","    #height_shift_range=0.2,\n","    #shear_range=0.2,\n","    #zoom_range=0.2,\n","    horizontal_flip=True,\n","    #fill_mode='nearest'\n",")\n","train_generator = train_datagen.flow_from_dataframe(\n","    df_train,\n","    x_col='image',\n","    y_col='label',\n","    target_size=image_size,\n","    batch_size=batch_size,\n","    shuffle=True\n",")\n","test_generator = datagen.flow_from_dataframe(\n","    df_test,\n","    x_col='image',\n","    y_col='label',\n","    target_size=image_size,\n","    batch_size=batch_size,\n","    shuffle=False\n",")\n","val_generator = datagen.flow_from_dataframe(\n","    df_val,\n","    x_col='image',\n","    y_col='label',\n","    target_size=image_size,\n","    batch_size=batch_size,\n","    shuffle=False\n",")"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"U9pweYNs4BxO","executionInfo":{"status":"ok","timestamp":1740456465876,"user_tz":-330,"elapsed":4,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"}}},"outputs":[],"source":["class_ = test_generator.class_indices.keys()\n","class_ = list(class_)"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"executionInfo":{"elapsed":20991,"status":"ok","timestamp":1740456493554,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"d4OUMOwG4FO9","outputId":"814d119c-0960-4df9-f978-d3f6e387594a"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m222\u001b[0m, \u001b[38;5;34m222\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │             \u001b[38;5;34m896\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m111\u001b[0m, \u001b[38;5;34m111\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m109\u001b[0m, \u001b[38;5;34m109\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │          \u001b[38;5;34m18,496\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m54\u001b[0m, \u001b[38;5;34m54\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m52\u001b[0m, \u001b[38;5;34m52\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m36,928\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m36,928\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m36,928\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_4 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_5 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m, \u001b[38;5;34m3\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │          \u001b[38;5;34m36,928\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_5 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m4,160\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m38\u001b[0m)                  │           \u001b[38;5;34m2,470\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">222</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">222</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">111</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">111</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">109</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">109</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">54</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">54</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">52</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">52</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,160</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">38</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,470</span> │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m173,734\u001b[0m (678.65 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">173,734</span> (678.65 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m173,734\u001b[0m (678.65 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">173,734</span> (678.65 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}],"source":["#building the model\n","model = keras.models.Sequential([\n","    keras.layers.Conv2D(32, kernel_size = (3,3), activation = 'relu', input_shape = (224,224,3)),\n","    keras.layers.MaxPooling2D(2,2),\n","\n","    keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),\n","    keras.layers.MaxPooling2D(2,2),\n","\n","    keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),\n","    keras.layers.MaxPooling2D(2,2),\n","\n","    keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),\n","    keras.layers.MaxPooling2D(2,2),\n","\n","    keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),\n","    keras.layers.MaxPooling2D(2,2),\n","\n","    keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),\n","    keras.layers.MaxPooling2D(2,2),\n","\n","    keras.layers.Flatten(),\n","\n","    keras.layers.Dense(64, activation='relu'),\n","\n","    keras.layers.Dense(38, activation='softmax'),\n","\n","])\n","model.summary()"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1540543,"status":"ok","timestamp":1740458050561,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"FG-oPnq84JAO","outputId":"f00aee70-d84d-459c-b4d7-b069448fdd94"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m113s\u001b[0m 76ms/step - accuracy: 0.3143 - auc: 0.8369 - loss: 2.5515 - val_accuracy: 0.6838 - val_auc: 0.9775 - val_loss: 1.0262\n","Epoch 2/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m93s\u001b[0m 69ms/step - accuracy: 0.7322 - auc: 0.9834 - loss: 0.8722 - val_accuracy: 0.8063 - val_auc: 0.9908 - val_loss: 0.6115\n","Epoch 3/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m92s\u001b[0m 67ms/step - accuracy: 0.8183 - auc: 0.9916 - loss: 0.5699 - val_accuracy: 0.8506 - val_auc: 0.9932 - val_loss: 0.4651\n","Epoch 4/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m150s\u001b[0m 73ms/step - accuracy: 0.8579 - auc: 0.9937 - loss: 0.4489 - val_accuracy: 0.8855 - val_auc: 0.9956 - val_loss: 0.3516\n","Epoch 5/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 66ms/step - accuracy: 0.8833 - auc: 0.9958 - loss: 0.3559 - val_accuracy: 0.8932 - val_auc: 0.9961 - val_loss: 0.3316\n","Epoch 6/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m93s\u001b[0m 68ms/step - accuracy: 0.8977 - auc: 0.9966 - loss: 0.3059 - val_accuracy: 0.8945 - val_auc: 0.9947 - val_loss: 0.3424\n","Epoch 7/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 67ms/step - accuracy: 0.9097 - auc: 0.9967 - loss: 0.2789 - val_accuracy: 0.9076 - val_auc: 0.9963 - val_loss: 0.2809\n","Epoch 8/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 67ms/step - accuracy: 0.9214 - auc: 0.9975 - loss: 0.2322 - val_accuracy: 0.9105 - val_auc: 0.9967 - val_loss: 0.2710\n","Epoch 9/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 66ms/step - accuracy: 0.9314 - auc: 0.9979 - loss: 0.2063 - val_accuracy: 0.9357 - val_auc: 0.9984 - val_loss: 0.1870\n","Epoch 10/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m93s\u001b[0m 68ms/step - accuracy: 0.9337 - auc: 0.9978 - loss: 0.1997 - val_accuracy: 0.9298 - val_auc: 0.9972 - val_loss: 0.2217\n","Epoch 11/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 66ms/step - accuracy: 0.9389 - auc: 0.9983 - loss: 0.1780 - val_accuracy: 0.9413 - val_auc: 0.9985 - val_loss: 0.1721\n","Epoch 12/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m93s\u001b[0m 69ms/step - accuracy: 0.9475 - auc: 0.9986 - loss: 0.1555 - val_accuracy: 0.9365 - val_auc: 0.9976 - val_loss: 0.1852\n","Epoch 13/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 66ms/step - accuracy: 0.9489 - auc: 0.9986 - loss: 0.1464 - val_accuracy: 0.9418 - val_auc: 0.9975 - val_loss: 0.1831\n","Epoch 14/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 67ms/step - accuracy: 0.9526 - auc: 0.9985 - loss: 0.1438 - val_accuracy: 0.9359 - val_auc: 0.9973 - val_loss: 0.1978\n","Epoch 15/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 66ms/step - accuracy: 0.9511 - auc: 0.9982 - loss: 0.1497 - val_accuracy: 0.9343 - val_auc: 0.9971 - val_loss: 0.2005\n","Epoch 16/20\n","\u001b[1m1358/1358\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m92s\u001b[0m 67ms/step - accuracy: 0.9553 - auc: 0.9986 - loss: 0.1303 - val_accuracy: 0.9446 - val_auc: 0.9974 - val_loss: 0.1748\n"]}],"source":["#model training\n","checkpoint_cb =ModelCheckpoint(\"my_keras_model.keras\", save_best_only=True)\n","early_stopping_cb =EarlyStopping(patience=5, restore_best_weights=True)\n","model.compile(optimizer ='adam', loss='categorical_crossentropy', metrics=['accuracy',keras.metrics.AUC()])\n","hist=model.fit(train_generator,epochs=20,validation_data=val_generator,callbacks=[checkpoint_cb,early_stopping_cb])"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":551},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1740458146433,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"a9QkJeCq4NMW","outputId":"0df2ddaa-32d1-4287-9610-2d4cc0458477"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    accuracy       auc      loss  val_accuracy   val_auc  val_loss\n","0   0.479560  0.928643  1.865209      0.683794  0.977509  1.026155\n","1   0.760404  0.986275  0.775137      0.806262  0.990828  0.611483\n","2   0.827709  0.992209  0.538592      0.850645  0.993167  0.465105\n","3   0.863479  0.994197  0.426985      0.885451  0.995608  0.351570\n","4   0.888546  0.995602  0.344345      0.893186  0.996128  0.331605\n","5   0.899227  0.996492  0.304268      0.894475  0.994677  0.342434\n","6   0.911380  0.996767  0.272616      0.907551  0.996301  0.280889\n","7   0.922291  0.997438  0.231995      0.910497  0.996691  0.270967\n","8   0.931590  0.997703  0.208058      0.935727  0.998353  0.186983\n","9   0.934698  0.997664  0.202099      0.929834  0.997183  0.221677\n","10  0.936033  0.997972  0.189920      0.941252  0.998498  0.172145\n","11  0.942547  0.998200  0.172581      0.936464  0.997639  0.185161\n","12  0.946759  0.998338  0.155334      0.941805  0.997477  0.183067\n","13  0.951340  0.998372  0.146538      0.935912  0.997343  0.197754\n","14  0.950212  0.998048  0.154399      0.934254  0.997136  0.200489\n","15  0.953020  0.998416  0.138504      0.944567  0.997411  0.174787"],"text/html":["\n","  <div id=\"df-86a2b842-ceca-4cae-aebc-2a1a44f97c0b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>accuracy</th>\n","      <th>auc</th>\n","      <th>loss</th>\n","      <th>val_accuracy</th>\n","      <th>val_auc</th>\n","      <th>val_loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.479560</td>\n","      <td>0.928643</td>\n","      <td>1.865209</td>\n","      <td>0.683794</td>\n","      <td>0.977509</td>\n","      <td>1.026155</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.760404</td>\n","      <td>0.986275</td>\n","      <td>0.775137</td>\n","      <td>0.806262</td>\n","      <td>0.990828</td>\n","      <td>0.611483</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.827709</td>\n","      <td>0.992209</td>\n","      <td>0.538592</td>\n","      <td>0.850645</td>\n","      <td>0.993167</td>\n","      <td>0.465105</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.863479</td>\n","      <td>0.994197</td>\n","      <td>0.426985</td>\n","      <td>0.885451</td>\n","      <td>0.995608</td>\n","      <td>0.351570</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.888546</td>\n","      <td>0.995602</td>\n","      <td>0.344345</td>\n","      <td>0.893186</td>\n","      <td>0.996128</td>\n","      <td>0.331605</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.899227</td>\n","      <td>0.996492</td>\n","      <td>0.304268</td>\n","      <td>0.894475</td>\n","      <td>0.994677</td>\n","      <td>0.342434</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.911380</td>\n","      <td>0.996767</td>\n","      <td>0.272616</td>\n","      <td>0.907551</td>\n","      <td>0.996301</td>\n","      <td>0.280889</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.922291</td>\n","      <td>0.997438</td>\n","      <td>0.231995</td>\n","      <td>0.910497</td>\n","      <td>0.996691</td>\n","      <td>0.270967</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.931590</td>\n","      <td>0.997703</td>\n","      <td>0.208058</td>\n","      <td>0.935727</td>\n","      <td>0.998353</td>\n","      <td>0.186983</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.934698</td>\n","      <td>0.997664</td>\n","      <td>0.202099</td>\n","      <td>0.929834</td>\n","      <td>0.997183</td>\n","      <td>0.221677</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.936033</td>\n","      <td>0.997972</td>\n","      <td>0.189920</td>\n","      <td>0.941252</td>\n","      <td>0.998498</td>\n","      <td>0.172145</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>0.942547</td>\n","      <td>0.998200</td>\n","      <td>0.172581</td>\n","      <td>0.936464</td>\n","      <td>0.997639</td>\n","      <td>0.185161</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>0.946759</td>\n","      <td>0.998338</td>\n","      <td>0.155334</td>\n","      <td>0.941805</td>\n","      <td>0.997477</td>\n","      <td>0.183067</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>0.951340</td>\n","      <td>0.998372</td>\n","      <td>0.146538</td>\n","      <td>0.935912</td>\n","      <td>0.997343</td>\n","      <td>0.197754</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>0.950212</td>\n","      <td>0.998048</td>\n","      <td>0.154399</td>\n","      <td>0.934254</td>\n","      <td>0.997136</td>\n","      <td>0.200489</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0.953020</td>\n","      <td>0.998416</td>\n","      <td>0.138504</td>\n","      <td>0.944567</td>\n","      <td>0.997411</td>\n","      <td>0.174787</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86a2b842-ceca-4cae-aebc-2a1a44f97c0b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-86a2b842-ceca-4cae-aebc-2a1a44f97c0b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-86a2b842-ceca-4cae-aebc-2a1a44f97c0b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1164ef5e-6ae1-472d-8236-adb1b2941021\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1164ef5e-6ae1-472d-8236-adb1b2941021')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1164ef5e-6ae1-472d-8236-adb1b2941021 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_fa4c5015-b0fb-44d8-9632-04c7740cbe6d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('hist_')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fa4c5015-b0fb-44d8-9632-04c7740cbe6d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('hist_');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"hist_","summary":"{\n  \"name\": \"hist_\",\n  \"rows\": 16,\n  \"fields\": [\n    {\n      \"column\": \"accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11926702959320507,\n        \"min\": 0.47955989837646484,\n        \"max\": 0.9530199766159058,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.47955989837646484,\n          0.7604041695594788,\n          0.8992266058921814\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.017193882452341932,\n        \"min\": 0.9286428689956665,\n        \"max\": 0.9984164237976074,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.9286428689956665,\n          0.9862747192382812,\n          0.9964921474456787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4308290920498706,\n        \"min\": 0.13850440084934235,\n        \"max\": 1.865208625793457,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          1.865208625793457,\n          0.7751367092132568,\n          0.30426833033561707\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06808173990137743,\n        \"min\": 0.6837937235832214,\n        \"max\": 0.9445672035217285,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.6837937235832214,\n          0.8062615394592285,\n          0.8944751620292664\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.005098811650001044,\n        \"min\": 0.9775089621543884,\n        \"max\": 0.9984979629516602,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.9775089621543884,\n          0.9908276200294495,\n          0.9946774840354919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val_loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22305250845279992,\n        \"min\": 0.17214465141296387,\n        \"max\": 1.0261553525924683,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          1.0261553525924683,\n          0.6114826798439026,\n          0.3424336612224579\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}],"source":["hist_=pd.DataFrame(hist.history)\n","hist_"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"executionInfo":{"elapsed":455,"status":"ok","timestamp":1740458150297,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"b6wuKrWz_y6p","outputId":"5a1a31c4-434c-4e65-9fde-7177d9aea561"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2500x1000 with 3 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#training history visualization\n","plt.figure(figsize=(25,10))\n","plt.subplot(1,3,1)\n","plt.plot(hist_['loss'],'b-o',label='Train_Loss')\n","plt.plot(hist_['val_loss'],'r-o',label='Validation_Loss')\n","plt.title('Train_Loss & Validation_Loss',fontsize=20)\n","plt.legend()\n","plt.subplot(1,3,2)\n","plt.plot(hist_['accuracy'],'b-o',label='Train_Accuracy')\n","plt.plot(hist_['val_accuracy'],'r-o',label='Validation_Accuracy')\n","plt.title('Train_Accuracy & Validation_Accuracy',fontsize=20)\n","plt.legend()\n","plt.subplot(1,3,3)\n","plt.plot(hist_.iloc[:,1],'b-o',label='Train_auc')\n","plt.plot(hist_.iloc[:,4],'r-o',label='Validation_auc')\n","plt.title('Train_AUC & Validation_AUC',fontsize=20)\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13516,"status":"ok","timestamp":1740458169677,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"pi1-5-lb_3PC","outputId":"f18768b0-9143-4662-e4f6-44892411b9b2"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m170/170\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 78ms/step - accuracy: 0.9298 - auc: 0.9959 - loss: 0.2197\n","Test Loss = 0.21638132631778717\n","Test Accuracy = 0.9278217554092407\n","Test AUC = 0.996488630771637\n"]}],"source":["#model evaluation\n","score, acc,auc = model.evaluate(test_generator)\n","print('Test Loss =', score)\n","print('Test Accuracy =', acc)\n","print('Test AUC =', auc)"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":10337,"status":"ok","timestamp":1740458183160,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"fAG3ryle_5aH","outputId":"9cd8caff-d730-4143-ed83-63731180f828"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m170/170\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 49ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["   Actual  Prediction\n","0       1           1\n","1      17          17\n","2      24          24\n","3      19          19\n","4      31          31"],"text/html":["\n","  <div id=\"df-d6b01749-9295-4a3d-81c6-a4ce19c974e8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Prediction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>24</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>19</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31</td>\n","      <td>31</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6b01749-9295-4a3d-81c6-a4ce19c974e8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d6b01749-9295-4a3d-81c6-a4ce19c974e8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d6b01749-9295-4a3d-81c6-a4ce19c974e8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-876f0c83-fe77-43d0-bd15-16ec3cde5465\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-876f0c83-fe77-43d0-bd15-16ec3cde5465')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-876f0c83-fe77-43d0-bd15-16ec3cde5465 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5431,\n  \"fields\": [\n    {\n      \"column\": \"Actual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 0,\n        \"max\": 37,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          18,\n          2,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prediction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 0,\n        \"max\": 37,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          32,\n          22,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}],"source":["# Get true labels\n","y_test = test_generator.classes\n","# Predict probabilities for each class\n","predictions = model.predict(test_generator)\n","# Convert predicted probabilities to class labels (choose the class with the highest probability)\n","y_pred = np.argmax(predictions, axis=1)\n","# Flatten both arrays just in case\n","y_test = np.ravel(y_test)\n","y_pred = np.ravel(y_pred)\n","# Create a DataFrame to compare actual vs predicted labels\n","df = pd.DataFrame({'Actual': y_test, 'Prediction': y_pred})\n","# Display the DataFrame\n","df.head()  # Show the first few rows of the comparison"]},{"cell_type":"markdown","metadata":{"id":"DBTjjBYSAaEb"},"source":["Predictions and classification reports"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1PQXB-PQdBZO2Z5NcOsvxwpZ5qTG5bJUh"},"executionInfo":{"elapsed":15596,"status":"ok","timestamp":1740458254637,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"Ycs4CaXr_6F4","outputId":"06d1df1c-7734-4c4f-9ef8-71c5126ca49a"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["batch = next(test_generator)\n","images= batch[0]\n","plt.figure(figsize=(50,80))\n","for n in range(32):\n","    plt.subplot(8,4,n+1)\n","    plt.imshow(images[n])\n","    plt.axis('off')\n","    text = f'Actual : {class_[int(y_test[n])]}\\npred : {class_[int(y_pred[n])]}\\n'\n","    plt.title(text,fontsize=25)"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1740458259327,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"},"user_tz":-330},"id":"YNHjv5Yc_8-d","outputId":"67a2e323-78b2-4152-d881-a91ac5785270"},"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report is :                                                      precision    recall  f1-score   support\n","\n","                                Apple___Apple_scab       0.80      0.90      0.85        63\n","                                 Apple___Black_rot       0.88      0.95      0.91        62\n","                          Apple___Cedar_apple_rust       0.93      0.96      0.95        27\n","                                   Apple___healthy       0.92      0.88      0.90       165\n","                               Blueberry___healthy       0.95      0.99      0.97       150\n","          Cherry_(including_sour)___Powdery_mildew       0.95      0.94      0.95       105\n","                 Cherry_(including_sour)___healthy       0.90      0.95      0.93        85\n","Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot       0.82      0.80      0.81        51\n","                       Corn_(maize)___Common_rust_       0.99      0.99      0.99       120\n","               Corn_(maize)___Northern_Leaf_Blight       0.90      0.83      0.86        98\n","                            Corn_(maize)___healthy       1.00      0.91      0.95       116\n","                                 Grape___Black_rot       0.85      0.97      0.90       118\n","                      Grape___Esca_(Black_Measles)       0.98      0.95      0.96       139\n","        Grape___Leaf_blight_(Isariopsis_Leaf_Spot)       0.93      0.94      0.93       108\n","                                   Grape___healthy       0.95      0.93      0.94        42\n","          Orange___Haunglongbing_(Citrus_greening)       0.99      0.99      0.99       551\n","                            Peach___Bacterial_spot       0.94      0.95      0.95       230\n","                                   Peach___healthy       1.00      0.94      0.97        36\n","                     Pepper,_bell___Bacterial_spot       0.98      0.84      0.90        99\n","                            Pepper,_bell___healthy       0.86      0.95      0.90       148\n","                             Potato___Early_blight       0.99      0.91      0.95       100\n","                              Potato___Late_blight       0.71      0.87      0.78       100\n","                                  Potato___healthy       0.64      0.47      0.54        15\n","                               Raspberry___healthy       0.76      1.00      0.86        37\n","                                 Soybean___healthy       0.99      0.90      0.94       509\n","                           Squash___Powdery_mildew       0.89      0.99      0.94       184\n","                          Strawberry___Leaf_scorch       0.85      0.95      0.89       111\n","                              Strawberry___healthy       0.94      0.98      0.96        45\n","                           Tomato___Bacterial_spot       0.89      0.93      0.91       213\n","                             Tomato___Early_blight       0.74      0.87      0.80       100\n","                              Tomato___Late_blight       0.86      0.76      0.81       191\n","                                Tomato___Leaf_Mold       0.94      0.92      0.93        95\n","                       Tomato___Septoria_leaf_spot       0.95      0.86      0.91       177\n","     Tomato___Spider_mites Two-spotted_spider_mite       0.98      0.85      0.91       168\n","                              Tomato___Target_Spot       0.85      0.89      0.87       141\n","            Tomato___Tomato_Yellow_Leaf_Curl_Virus       0.99      0.99      0.99       536\n","                      Tomato___Tomato_mosaic_virus       0.83      0.92      0.87        37\n","                                  Tomato___healthy       0.99      0.97      0.98       159\n","\n","                                          accuracy                           0.93      5431\n","                                         macro avg       0.90      0.91      0.90      5431\n","                                      weighted avg       0.93      0.93      0.93      5431\n","\n"]}],"source":["ClassificationReport = classification_report(y_test,y_pred,target_names=class_)\n","print('Classification Report is : ', ClassificationReport)"]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/plant disease detection/leaf_disease_detection.keras')"],"metadata":{"id":"vMAr_p2yi1rA","executionInfo":{"status":"ok","timestamp":1740461813012,"user_tz":-330,"elapsed":113,"user":{"displayName":"21981A4251 RAVANAM BALU KARTHIK","userId":"12094325919358700329"}}},"execution_count":63,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[],"mount_file_id":"1y9qP-_-4brpjVcO01MjSP3V6-OgwzR9o","authorship_tag":"ABX9TyMPAYpIGHC2bbvsKDD6C7Wm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}