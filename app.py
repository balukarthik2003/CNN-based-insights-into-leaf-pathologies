
import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np
import gdown
import os

# Define the file ID
file_id = "1-025nCEuv7YsogDwFMNAf8ONrpUdYgZ7"

# Construct the full URL to the file
url = f"https://drive.google.com/uc?id={file_id}"

# Download the file
output = "leaf_disease_detection.keras"
if not os.path.exists(output):
    gdown.download(url, output, quiet=False)

# Page configuration
st.set_page_config(
    page_title="Leaf Disease Detection",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Language selection dropdown (no typing option)
language = st.sidebar.selectbox("Choose Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
                                options=["English", "Hindi", "Telugu"])

# Text content in different languages
content = {
    "English": {
        "title": "üåø Plant Disease Detection",
        "description": "Identify plant diseases with high accuracy using AI-powered technology.",
        "about_header": "About",
        "about_content": "This app uses a Convolutional Neural Network (CNN) model to detect diseases in plant leaves. The model was trained on a large dataset of plant images and can accurately identify several types of plant diseases.",
        "how_to_use_header": "How to Use",
        "instructions": ["1. Upload a clear image of a plant leaf.",
                         "2. Wait for the model to process the image.",
                         "3. View the predicted disease name on the main screen."],
        "species_header": "Available Species",
        "species": [
            "1. Apple", "2. Blueberry", "3. Cherry", "4. Corn", "5. Grape",
            "6. Orange", "7. Peach", "8. Pepper", "9. Potato", "10. Raspberry",
            "11. Soybean", "12. Squash", "13. Strawberry", "14. Tomato"
        ],
        "upload_prompt": "Choose a leaf image...",
        "predicted": "Predicted Disease:",
        "analyzing": "Analyzing... Please wait",
        "footer": "Powered by QIS COLLEGE | Created by Kalyan Chakravarthy Pantham and his teammates"
    },
    "Hindi": {
        "title": "üåø ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®",
        "description": "‡§è‡§Ü‡§à-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§∞‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§ü‡•Ä‡§ï ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
        "about_header": "‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
        "about_content": "‡§Ø‡§π ‡§ê‡§™ ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∞‡•ã‡§ó‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§ï‡§®‡•ç‡§µ‡•ã‡§≤‡•ç‡§Ø‡•Ç‡§∂‡§®‡§≤ ‡§®‡•ç‡§Ø‡•Ç‡§∞‡§≤ ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï (CNN) ‡§Æ‡•â‡§°‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
        "how_to_use_header": "‡§ï‡•à‡§∏‡•á ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á",
        "instructions": ["1. ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§™‡§§‡•ç‡§§‡•Ä ‡§ï‡•Ä ‡§è‡§ï ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
                         "2. ‡§Æ‡•â‡§°‡§≤ ‡§ï‡•á ‡§õ‡§µ‡§ø ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
                         "3. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§"],
        "species_header": "‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§™‡•ç‡§∞‡§ú‡§æ‡§§‡§ø‡§Ø‡§æ‡§Ç",
        "species": [
            "1. ‡§∏‡•á‡§¨", "2. ‡§¨‡•ç‡§≤‡•Ç‡§¨‡•á‡§∞‡•Ä", "3. ‡§ö‡•á‡§∞‡•Ä", "4. ‡§Æ‡§ï‡•ç‡§ï‡§æ", "5. ‡§Ö‡§Ç‡§ó‡•Ç‡§∞",
            "6. ‡§∏‡§Ç‡§§‡§∞‡§æ", "7. ‡§Ü‡§°‡§º‡•Ç", "8. ‡§Æ‡§ø‡§∞‡•ç‡§ö", "9. ‡§Ü‡§≤‡•Ç", "10. ‡§∞‡§æ‡§∏‡•ç‡§™‡§¨‡•á‡§∞‡•Ä",
            "11. ‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®", "12. ‡§∏‡•ç‡§ï‡•ç‡§µ‡•à‡§∂", "13. ‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§¨‡•á‡§∞‡•Ä", "14. ‡§ü‡§Æ‡§æ‡§ü‡§∞"
        ],
        "upload_prompt": "‡§™‡§§‡•ç‡§§‡•Ä ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç...",
        "predicted": "‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§∞‡•ã‡§ó:",
        "analyzing": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à... ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç",
        "footer": "‡§ï‡•ç‡§Ø‡•Ç‡§Ü‡§à‡§è‡§∏ ‡§ï‡•â‡§≤‡•á‡§ú ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ | ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£ ‡§ö‡§ï‡•ç‡§∞‡§µ‡§∞‡•ç‡§§‡•Ä ‡§™‡§Ç‡§•‡§Æ ‡§î‡§∞ ‡§â‡§®‡§ï‡•Ä ‡§ü‡•Ä‡§Æ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§"
    },
    "Telugu": {
        "title": "üåø ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞≤ ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å",
        "description": "AI ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞ø‡∞§ ‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï‡∞§‡∞®‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞≤ ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤‡∞®‡±Å ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞Ç‡∞ó‡∞æ ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
        "about_header": "‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø",
        "about_content": "‡∞à ‡∞Ø‡∞æ‡∞™‡±ç ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞≤ ‡∞Ü‡∞ï‡±Å‡∞≤‡±ç‡∞≤‡±ã ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤‡∞®‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡∞®‡±ç‚Äå‡∞µ‡∞≤‡±ç‡∞Ø‡±Ç‡∞∑‡∞®‡∞≤‡±ç ‡∞®‡±ç‡∞Ø‡±Ç‡∞∞‡∞≤‡±ç ‡∞®‡±Ü‡∞ü‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞ï‡±ç (CNN) ‡∞Æ‡±ã‡∞°‡∞≤‡±ç‚Äå‡∞®‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.",
        "how_to_use_header": "‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞é‡∞≤‡∞æ",
        "instructions": ["1. ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï ‡∞Ü‡∞ï‡±Å‡∞®‡∞ø ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
                         "2. ‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞∏‡±á ‡∞µ‡∞∞‡∞ï‡±Å ‡∞µ‡±á‡∞ö‡∞ø ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø.",
                         "3. ‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞® ‡∞∏‡±ç‡∞ï‡±ç‡∞∞‡±Ä‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞™‡±á‡∞∞‡±Å‡∞®‡±Å ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø."],
        "species_header": "‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞® ‡∞ú‡∞æ‡∞§‡±Å‡∞≤‡±Å",
        "species": [
            "1. ‡∞Ü‡∞™‡∞ø‡∞≤‡±ç", "2. ‡∞¨‡±ç‡∞≤‡±Ç‡∞¨‡±Ü‡∞∞‡±ç‡∞∞‡±Ä", "3. ‡∞ö‡±Ü‡∞∞‡±ç‡∞∞‡±Ä", "4. ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞ú‡±ä‡∞®‡±ç‡∞®", "5. ‡∞¶‡±ç‡∞∞‡∞æ‡∞ï‡±ç‡∞∑",
            "6. ‡∞®‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ú", "7. ‡∞™‡±Ä‡∞ö‡±ç", "8. ‡∞™‡±Ü‡∞™‡±ç‡∞™‡∞∞‡±ç", "9. ‡∞¨‡∞Ç‡∞ó‡∞æ‡∞≥‡∞æ‡∞¶‡±Å‡∞Ç‡∞™", "10. ‡∞∞‡∞æ‡∞∏‡±ç‡∞™‡±ç‡∞¨‡±Ü‡∞∞‡±ç‡∞∞‡±Ä",
            "11. ‡∞∏‡±ã‡∞Ø‡∞æ‡∞¨‡±Ä‡∞®‡±ç", "12. ‡∞∏‡±ç‡∞ï‡±ç‡∞µ‡∞æ‡∞∑‡±ç", "13. ‡∞∏‡±ç‡∞ü‡±ç‡∞∞‡∞æ‡∞¨‡±Ü‡∞∞‡±ç‡∞∞‡±Ä", "14. ‡∞ü‡∞Æ‡±ã‡∞ü‡∞æ"
        ],
        "upload_prompt": "‡∞Ü‡∞ï‡±Å‡∞®‡∞ø ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø...",
        "predicted": "‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø:",
        "analyzing": "‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£ ‡∞ú‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø... ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±á‡∞ö‡∞ø ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø",
        "footer": "‡∞ï‡±ç‡∞Ø‡±Ç‡∞ê‡∞é‡∞∏‡±ç ‡∞ï‡∞æ‡∞≤‡±á‡∞ú‡±ç ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ ‡∞®‡∞ø‡∞∞‡±ç‡∞µ‡∞π‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø | ‡∞ï‡∞≤‡±ç‡∞Ø‡∞æ‡∞£‡±ç ‡∞ö‡∞ï‡±ç‡∞∞‡∞µ‡∞∞‡±ç‡∞§‡∞ø ‡∞™‡∞Ç‡∞•‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞§‡∞®‡∞ø ‡∞ü‡±Ä‡∞Æ‡±ç ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø"
    }
}

# Add a header and a logo/banner
st.image(
    "https://st4.depositphotos.com/1054144/24138/i/450/depositphotos_241389492-stock-photo-young-plant-in-sunlight.jpg",
    width=100)
st.title(content[language]["title"])
st.markdown(f"## {content[language]['description']}")

# Sidebar settings
st.sidebar.header(content[language]["about_header"])
st.sidebar.markdown(content[language]["about_content"])

st.sidebar.header(content[language]["how_to_use_header"])
# Display instructions in a vertical list with numbering
for instruction in content[language]["instructions"]:
    st.sidebar.markdown(f"- {instruction}")

st.sidebar.header(content[language]["species_header"])
# Display species in a vertical list with numbering
for species in content[language]["species"]:
    st.sidebar.markdown(f"- {species}")

# Upload an image file
uploaded_file = st.file_uploader(content[language]["upload_prompt"], type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    st.image(uploaded_file, caption="Uploaded Image", use_column_width=False, width=400)

    try:
        st.write(content[language]["analyzing"])
        model = tf.keras.models.load_model(output)

        def predict_image_class(model, image, class_indices):
            # Open and resize the image
            image = Image.open(image)
            image = image.resize((224, 224))  # Resize to model input size
            image = np.array(image) / 255.0  # Normalize to [0, 1]
            image = np.expand_dims(image, axis=0)  # Add batch dimension
            predictions = model.predict(image)
            predicted_class = np.argmax(predictions, axis=1)
            return predicted_class

        class_indices = {
            0: 'Apple___Apple_scab',
            1: 'Apple___Black_rot',
            2: 'Apple___Cedar_apple_rust',
            3: 'Apple___healthy',
            4: 'Blueberry___healthy',
            5: 'Cherry___Powdery_mildew',
            6: 'Cherry___healthy',
            7: 'Corn___Cercospora_leaf_spot',
            8: 'Corn___Common_rust',
            9: 'Corn___Northern_Leaf_Blight',
            10: 'Corn___healthy',
            11: 'Grape___Black_rot',
            12: 'Grape___Esca_(Black_Measles)',
            13: 'Grape___Leaf_blight',
            14: 'Grape___healthy',
            15: 'Orange___Citrus_greening',
            16: 'Peach___Bacterial_spot',
            17: 'Peach___healthy',
            18: 'Pepper___Bacterial_spot',
            19: 'Pepper___healthy',
            20: 'Potato___Early_blight',
            21: 'Potato___Late_blight',
            22: 'Potato___healthy',
            23: 'Raspberry___healthy',
            24: 'Soybean___healthy',
            25: 'Squash___Powdery_mildew',
            26: 'Strawberry___Leaf_scorch',
            27: 'Strawberry___healthy',
            28: 'Tomato___Bacterial_spot',
            29: 'Tomato___Early_blight',
            30: 'Tomato___Late_blight',
            31: 'Tomato___Leaf_Mold',
            32: 'Tomato___Septoria_leaf_spot',
            33: 'Tomato___Spider_mites',
            34: 'Tomato___Target_Spot',
            35: 'Tomato___Tomato_Yellow_Leaf_Curl_Virus',
            36: 'Tomato___Tomato_mosaic_virus',
            37: 'Tomato___healthy'
        }

        predicted_class = predict_image_class(model, uploaded_file, class_indices)
        predicted_class_name = class_indices.get(predicted_class[0], "Unknown Disease")

        st.write(f"**{content[language]['predicted']}** {predicted_class_name}")
    except Exception as e:
        st.error(f"An error occurred: {str(e)}")

# Footer with dynamic content
st.markdown(f"""
<style>
footer {{
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #f1f1f1;
    color: #333;
    text-align: center;
    padding: 10px;
}}
</style>
<footer>
    <p>{content[language]["footer"]}</p>
</footer>
""", unsafe_allow_html=True)
